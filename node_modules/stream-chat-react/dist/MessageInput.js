"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageInput = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _context7 = require("../context");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _MessageInputLarge = require("./MessageInputLarge");

var _SendButton = require("./SendButton");

var _seamlessImmutable = _interopRequireDefault(require("seamless-immutable"));

var _utils = require("../utils");

var _uniq = _interopRequireDefault(require("lodash/uniq"));

var _reactFileUtils = require("react-file-utils");

var _streamChat = require("stream-chat");

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
}

var MessageInput = function (_PureComponent) {
  (0, _inherits2.default)(MessageInput, _PureComponent);

  var _super = _createSuper(MessageInput);

  function MessageInput(props) {
    var _this;

    (0, _classCallCheck2.default)(this, MessageInput);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "openEmojiPicker", function () {
      if (!_this.state.showEmojiPicker) {
        _this.setState(function () {
          return {
            emojiPickerIsOpen: true
          };
        }, function () {
          document.addEventListener('click', _this.closeEmojiPicker, false);
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "closeEmojiPicker", function (e) {
      if (_this.emojiPickerRef.current && !_this.emojiPickerRef.current.contains(e.target)) {
        _this.setState({
          emojiPickerIsOpen: false
        }, function () {
          document.removeEventListener('click', _this.closeEmojiPicker, false);
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSelectEmoji", function (emoji) {
      return _this.insertText(emoji.native);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "insertText", function () {
      var _ref = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(textToInsert) {
        var newCursorPosition, textareaElement;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this.setState(function (prevState) {
                  var prevText = prevState.text;
                  var textareaElement = _this.textareaRef.current;

                  if (!textareaElement) {
                    return {
                      text: prevText + textToInsert
                    };
                  }

                  var selectionStart = textareaElement.selectionStart,
                      selectionEnd = textareaElement.selectionEnd;
                  newCursorPosition = selectionStart + textToInsert.length;
                  return {
                    text: prevText.slice(0, selectionStart) + textToInsert + prevText.slice(selectionEnd)
                  };
                });

              case 2:
                textareaElement = _this.textareaRef.current;

                if (!(!textareaElement || newCursorPosition == null)) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return");

              case 5:
                textareaElement.selectionStart = newCursorPosition;
                textareaElement.selectionEnd = newCursorPosition;

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCommands", function () {
      return _this.props.channel.getConfig().commands;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getUsers", function () {
      var users = [];
      var members = _this.props.channel.state.members;
      var watchers = _this.props.channel.state.watchers;

      if (members && Object.values(members).length) {
        Object.values(members).forEach(function (member) {
          return users.push(member.user);
        });
      }

      if (watchers && Object.values(watchers).length) {
        users.push.apply(users, (0, _toConsumableArray2.default)(Object.values(watchers)));
      }

      var userMap = {};

      for (var _i = 0, _users = users; _i < _users.length; _i++) {
        var user = _users[_i];

        if (user !== undefined && !userMap[user.id]) {
          userMap[user.id] = user;
        }
      }

      return Object.values(userMap);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleChange", function (event) {
      event.preventDefault();

      if (!event || !event.target) {
        return '';
      }

      var text = event.target.value;

      _this.setState({
        text
      });

      if (text) {
        (0, _streamChat.logChatPromiseExecution)(_this.props.channel.keystroke(), 'start typing event');
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSubmit", function (event) {
      event.preventDefault();
      var editing = !!_this.props.message;

      var trimmedMessage = _this.state.text.trim();

      var isEmptyMessage = trimmedMessage === '' || trimmedMessage === '>' || trimmedMessage === '``````' || trimmedMessage === '``' || trimmedMessage === '**' || trimmedMessage === '____' || trimmedMessage === '__' || trimmedMessage === '****';
      var hasFiles = _this.state.imageOrder.length > 0 || _this.state.fileOrder.length > 0;

      if (isEmptyMessage && !hasFiles) {
        return;
      }

      var text = _this.state.text;
      var attachments = (0, _toConsumableArray2.default)(_this.state.attachments);

      var _iterator = _createForOfIteratorHelper(_this.state.imageOrder),
          _step;

      try {
        var _loop = function _loop() {
          var id = _step.value;
          var image = _this.state.imageUploads[id];

          if (!image || image.state === 'failed') {
            return "continue";
          }

          if (image.state === 'uploading') {
            return {
              v: void 0
            };
          }

          var dupe = attachments.filter(function (attach) {
            return image.url === attach.image_url;
          });
          if (dupe.length >= 1) return "continue";
          attachments.push({
            type: 'image',
            image_url: image.url,
            fallback: image.file.name
          });
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _ret = _loop();

          switch (_ret) {
            case "continue":
              continue;

            default:
              if (typeof _ret === "object") return _ret.v;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var _iterator2 = _createForOfIteratorHelper(_this.state.fileOrder),
          _step2;

      try {
        var _loop2 = function _loop2() {
          var id = _step2.value;
          var upload = _this.state.fileUploads[id];

          if (!upload || upload.state === 'failed') {
            return "continue";
          }

          if (upload.state === 'uploading') {
            return {
              v: void 0
            };
          }

          var dupe = attachments.filter(function (attach) {
            return upload.asset_url === attach.url;
          });
          if (dupe.length >= 1) return "continue";
          attachments.push({
            type: 'file',
            asset_url: upload.url,
            title: upload.file.name,
            mime_type: upload.file.type,
            file_size: upload.file.size
          });
        };

        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _ret2 = _loop2();

          switch (_ret2) {
            case "continue":
              continue;

            default:
              if (typeof _ret2 === "object") return _ret2.v;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (editing) {
        var id = _this.props.message.id;
        var updatedMessage = {
          id
        };
        updatedMessage.text = text;
        updatedMessage.attachments = attachments;
        updatedMessage.mentioned_users = _this.state.mentioned_users;

        _this.props.clearEditingState();

        var updateMessagePromise = _this.props.editMessage(updatedMessage).then(_this.props.clearEditingState);

        (0, _streamChat.logChatPromiseExecution)(updateMessagePromise, 'update message');
      } else if (_this.props.overrideSubmitHandler && typeof _this.props.overrideSubmitHandler === 'function') {
        _this.props.overrideSubmitHandler({
          text,
          attachments,
          mentioned_users: (0, _uniq.default)(_this.state.mentioned_users),
          parent: _this.props.parent
        }, _this.props.channel.cid);

        _this.setState({
          text: '',
          mentioned_users: [],
          imageUploads: (0, _seamlessImmutable.default)({}),
          imageOrder: [],
          fileUploads: (0, _seamlessImmutable.default)({}),
          fileOrder: []
        });
      } else {
        var sendMessagePromise = _this.props.sendMessage({
          text,
          attachments,
          mentioned_users: (0, _uniq.default)(_this.state.mentioned_users),
          parent: _this.props.parent
        });

        (0, _streamChat.logChatPromiseExecution)(sendMessagePromise, 'send message');

        _this.setState({
          text: '',
          mentioned_users: [],
          imageUploads: (0, _seamlessImmutable.default)({}),
          imageOrder: [],
          fileUploads: (0, _seamlessImmutable.default)({}),
          fileOrder: []
        });
      }

      (0, _streamChat.logChatPromiseExecution)(_this.props.channel.stopTyping(), 'stop typing');
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_uploadNewFiles", function (files) {
      var _iterator3 = _createForOfIteratorHelper(files),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var file = _step3.value;

          if (file.type.startsWith('image/')) {
            _this._uploadNewImage(file);
          } else if (file instanceof File && !_this.props.noFiles) {
            _this._uploadNewFile(file);
          } else {
            return;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_uploadNewImage", function () {
      var _ref2 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(file) {
        var id, reader;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                id = (0, _utils.generateRandomId)();
                _context2.next = 3;
                return _this.setState(function (prevState) {
                  return {
                    numberOfUploads: prevState.numberOfUploads + 1,
                    imageOrder: prevState.imageOrder.concat(id),
                    imageUploads: prevState.imageUploads.setIn([id], {
                      id,
                      file,
                      state: 'uploading'
                    })
                  };
                });

              case 3:
                if (FileReader) {
                  reader = new FileReader();

                  reader.onload = function (event) {
                    _this.setState(function (prevState) {
                      return {
                        imageUploads: prevState.imageUploads.setIn([id, 'previewUri'], event.target.result)
                      };
                    });
                  };

                  reader.readAsDataURL(file);
                }

                return _context2.abrupt("return", _this._uploadImage(id));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_uploadNewFile", function () {
      var _ref3 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(file) {
        var id;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                id = (0, _utils.generateRandomId)();
                _context3.next = 3;
                return _this.setState(function (prevState) {
                  return {
                    numberOfUploads: prevState.numberOfUploads + 1,
                    fileOrder: prevState.fileOrder.concat(id),
                    fileUploads: prevState.fileUploads.setIn([id], {
                      id,
                      file,
                      state: 'uploading'
                    })
                  };
                });

              case 3:
                return _context3.abrupt("return", _this._uploadFile(id));

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_uploadImage", function () {
      var _ref4 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(id) {
        var img, file, response, alreadyRemoved;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                img = _this.state.imageUploads[id];

                if (img) {
                  _context4.next = 3;
                  break;
                }

                return _context4.abrupt("return");

              case 3:
                file = img.file;
                _context4.next = 6;
                return _this.setState(function (prevState) {
                  return {
                    imageUploads: prevState.imageUploads.setIn([id, 'state'], 'uploading')
                  };
                });

              case 6:
                response = {};
                response = {};
                _context4.prev = 8;

                if (!_this.props.doImageUploadRequest) {
                  _context4.next = 15;
                  break;
                }

                _context4.next = 12;
                return _this.props.doImageUploadRequest(file, _this.props.channel);

              case 12:
                response = _context4.sent;
                _context4.next = 18;
                break;

              case 15:
                _context4.next = 17;
                return _this.props.channel.sendImage(file);

              case 17:
                response = _context4.sent;

              case 18:
                _context4.next = 28;
                break;

              case 20:
                _context4.prev = 20;
                _context4.t0 = _context4["catch"](8);
                console.warn(_context4.t0);
                alreadyRemoved = false;
                _context4.next = 26;
                return _this.setState(function (prevState) {
                  var image = prevState.imageUploads[id];

                  if (!image) {
                    alreadyRemoved = true;
                    return {
                      numberOfUploads: prevState.numberOfUploads - 1
                    };
                  }

                  return {
                    imageUploads: prevState.imageUploads.setIn([id, 'state'], 'failed'),
                    numberOfUploads: prevState.numberOfUploads - 1
                  };
                });

              case 26:
                if (!alreadyRemoved) {
                  _this.props.errorHandler(_context4.t0, 'upload-image', {
                    feedGroup: _this.props.feedGroup,
                    userId: _this.props.userId
                  });
                }

                return _context4.abrupt("return");

              case 28:
                _this.setState(function (prevState) {
                  return {
                    imageUploads: prevState.imageUploads.setIn([id, 'state'], 'finished').setIn([id, 'url'], response.file)
                  };
                });

              case 29:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, null, [[8, 20]]);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_uploadFile", function () {
      var _ref5 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5(id) {
        var upload, file, response, alreadyRemoved;
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                upload = _this.state.fileUploads[id];

                if (upload) {
                  _context5.next = 3;
                  break;
                }

                return _context5.abrupt("return");

              case 3:
                file = upload.file;
                _context5.next = 6;
                return _this.setState(function (prevState) {
                  return {
                    imageUploads: prevState.imageUploads.setIn([id, 'state'], 'uploading')
                  };
                });

              case 6:
                response = {};
                response = {};
                _context5.prev = 8;

                if (!_this.props.doFileUploadRequest) {
                  _context5.next = 15;
                  break;
                }

                _context5.next = 12;
                return _this.props.doFileUploadRequest(file, _this.props.channel);

              case 12:
                response = _context5.sent;
                _context5.next = 18;
                break;

              case 15:
                _context5.next = 17;
                return _this.props.channel.sendFile(file);

              case 17:
                response = _context5.sent;

              case 18:
                _context5.next = 27;
                break;

              case 20:
                _context5.prev = 20;
                _context5.t0 = _context5["catch"](8);
                console.warn(_context5.t0);
                alreadyRemoved = false;
                _context5.next = 26;
                return _this.setState(function (prevState) {
                  var image = prevState.imageUploads[id];

                  if (!image) {
                    alreadyRemoved = true;
                    return {
                      numberOfUploads: prevState.numberOfUploads - 1
                    };
                  }

                  return {
                    numberOfUploads: prevState.numberOfUploads - 1,
                    fileUploads: prevState.fileUploads.setIn([id, 'state'], 'failed')
                  };
                });

              case 26:
                if (!alreadyRemoved) {
                  _this.props.errorHandler(_context5.t0, 'upload-file', {
                    feedGroup: _this.props.feedGroup,
                    userId: _this.props.userId
                  });
                }

              case 27:
                _this.setState(function (prevState) {
                  return {
                    fileUploads: prevState.fileUploads.setIn([id, 'state'], 'finished').setIn([id, 'url'], response.file)
                  };
                });

              case 28:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[8, 20]]);
      }));

      return function (_x5) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_removeImage", function (id) {
      _this.setState(function (prevState) {
        var img = prevState.imageUploads[id];

        if (!img) {
          return {};
        }

        return {
          numberOfUploads: prevState.numberOfUploads - 1,
          imageUploads: prevState.imageUploads.set(id, undefined),
          imageOrder: prevState.imageOrder.filter(function (_id) {
            return id !== _id;
          })
        };
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_removeFile", function (id) {
      _this.setState(function (prevState) {
        var upload = prevState.fileUploads[id];

        if (!upload) {
          return {};
        }

        return {
          numberOfUploads: prevState.numberOfUploads - 1,
          fileUploads: prevState.fileUploads.set(id, undefined),
          fileOrder: prevState.fileOrder.filter(function (_id) {
            return id !== _id;
          })
        };
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_onPaste", function () {
      var _ref6 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee6(event) {
        var items, plainTextPromise, _iterator4, _step4, _loop3, _ret3, fileLikes, s;

        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                items = event.clipboardData.items;

                if ((0, _reactFileUtils.dataTransferItemsHaveFiles)(items)) {
                  _context6.next = 3;
                  break;
                }

                return _context6.abrupt("return");

              case 3:
                event.preventDefault();
                _iterator4 = _createForOfIteratorHelper(items);
                _context6.prev = 5;

                _loop3 = function _loop3() {
                  var item = _step4.value;

                  if (item.kind === 'string' && item.type === 'text/plain') {
                    plainTextPromise = new Promise(function (resolve) {
                      item.getAsString(function (s) {
                        resolve(s);
                      });
                    });
                    return "break";
                  }
                };

                _iterator4.s();

              case 8:
                if ((_step4 = _iterator4.n()).done) {
                  _context6.next = 14;
                  break;
                }

                _ret3 = _loop3();

                if (!(_ret3 === "break")) {
                  _context6.next = 12;
                  break;
                }

                return _context6.abrupt("break", 14);

              case 12:
                _context6.next = 8;
                break;

              case 14:
                _context6.next = 19;
                break;

              case 16:
                _context6.prev = 16;
                _context6.t0 = _context6["catch"](5);

                _iterator4.e(_context6.t0);

              case 19:
                _context6.prev = 19;

                _iterator4.f();

                return _context6.finish(19);

              case 22:
                _context6.next = 24;
                return (0, _reactFileUtils.dataTransferItemsToFiles)(items);

              case 24:
                fileLikes = _context6.sent;

                if (!fileLikes.length) {
                  _context6.next = 28;
                  break;
                }

                _this._uploadNewFiles(fileLikes);

                return _context6.abrupt("return");

              case 28:
                if (!plainTextPromise) {
                  _context6.next = 33;
                  break;
                }

                _context6.next = 31;
                return plainTextPromise;

              case 31:
                s = _context6.sent;

                _this.insertText(s);

              case 33:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, null, [[5, 16, 19, 22]]);
      }));

      return function (_x6) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_onSelectItem", function (item) {
      _this.setState(function (prevState) {
        return {
          mentioned_users: [].concat((0, _toConsumableArray2.default)(prevState.mentioned_users), [item.id])
        };
      });
    });
    var imageOrder = [];
    var imageUploads = {};
    var fileOrder = [];
    var fileUploads = {};
    var _attachments = [];
    var mentioned_users = [];
    var _text = '';

    if (props.message) {
      _text = props.message.text;

      var _iterator5 = _createForOfIteratorHelper(props.message.attachments),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var attach = _step5.value;

          if (attach.type === 'image') {
            var id = (0, _utils.generateRandomId)();
            imageOrder.push(id);
            imageUploads[id] = {
              id,
              url: attach.image_url,
              state: 'finished',
              file: {
                name: attach.fallback
              }
            };
          } else if (attach.type === 'file') {
            var _id2 = (0, _utils.generateRandomId)();

            fileOrder.push(_id2);
            fileUploads[_id2] = {
              id: _id2,
              url: attach.asset_url,
              state: 'finished',
              file: {
                name: attach.title,
                type: attach.mime_type,
                size: attach.file_size
              }
            };
          } else {
            _attachments.push(attach);
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var _iterator6 = _createForOfIteratorHelper(props.message.mentioned_users),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var mention = _step6.value;
          mentioned_users.push(mention.id);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }

    _this.state = {
      text: _text,
      attachments: _attachments,
      imageOrder,
      imageUploads: (0, _seamlessImmutable.default)(imageUploads),
      fileOrder,
      fileUploads: (0, _seamlessImmutable.default)(fileUploads),
      emojiPickerIsOpen: false,
      filePanelIsOpen: false,
      mentioned_users,
      numberOfUploads: 0
    };
    _this.textareaRef = _react.default.createRef();
    _this.emojiPickerRef = _react.default.createRef();
    _this.panelRef = _react.default.createRef();
    return _this;
  }

  (0, _createClass2.default)(MessageInput, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.focus) {
        this.textareaRef.current.focus();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('click', this.closeEmojiPicker, false);
      document.removeEventListener('click', this.hideFilePanel, false);
    }
  }, {
    key: "render",
    value: function render() {
      var Input = this.props.Input;
      var handlers = {
        uploadNewFiles: this._uploadNewFiles,
        removeImage: this._removeImage,
        uploadImage: this._uploadImage,
        removeFile: this._removeFile,
        uploadFile: this._uploadFile,
        emojiPickerRef: this.emojiPickerRef,
        panelRef: this.panelRef,
        textareaRef: this.textareaRef,
        onSelectEmoji: this.onSelectEmoji,
        getUsers: this.getUsers,
        getCommands: this.getCommands,
        handleSubmit: this.handleSubmit,
        handleChange: this.handleChange,
        onPaste: this._onPaste,
        onSelectItem: this._onSelectItem,
        openEmojiPicker: this.openEmojiPicker
      };
      return _react.default.createElement(Input, (0, _extends2.default)({}, this.props, this.state, handlers));
    }
  }]);
  return MessageInput;
}(_react.PureComponent);

exports.MessageInput = MessageInput;
(0, _defineProperty2.default)(MessageInput, "propTypes", {
  focus: _propTypes.default.bool.isRequired,
  disabled: _propTypes.default.bool.isRequired,
  grow: _propTypes.default.bool.isRequired,
  maxRows: _propTypes.default.number.isRequired,
  channel: _propTypes.default.object.isRequired,
  typing: _propTypes.default.object.isRequired,
  parent: _propTypes.default.object,
  Input: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  doImageUploadRequest: _propTypes.default.func,
  doFileUploadRequest: _propTypes.default.func,
  SendButton: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  additionalTextareaProps: _propTypes.default.object
});
(0, _defineProperty2.default)(MessageInput, "defaultProps", {
  focus: false,
  disabled: false,
  grow: true,
  maxRows: 10,
  Input: _MessageInputLarge.MessageInputLarge,
  SendButton: _SendButton.SendButton,
  additionalTextareaProps: {}
});
exports.MessageInput = MessageInput = (0, _context7.withChannelContext)(MessageInput);