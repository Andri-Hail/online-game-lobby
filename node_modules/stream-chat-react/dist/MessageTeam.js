"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageTeam = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _Attachment = require("./Attachment");

var _Avatar = require("./Avatar");

var _MessageActionsBox = require("./MessageActionsBox");

var _ReactionSelector = require("./ReactionSelector");

var _EditMessageForm = require("./EditMessageForm");

var _SimpleReactionsList = require("./SimpleReactionsList");

var _MessageRepliesCountButton = require("./MessageRepliesCountButton");

var _LoadingIndicator = require("./LoadingIndicator");

var _Tooltip = require("./Tooltip");

var _Gallery = require("./Gallery");

var _MessageInput = require("./MessageInput");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("../utils");

var _context = require("../context");

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var reactionSvg = '<svg width="14" height="14" xmlns="http://www.w3.org/2000/svg"><path d="M11.108 8.05a.496.496 0 0 1 .212.667C10.581 10.147 8.886 11 7 11c-1.933 0-3.673-.882-4.33-2.302a.497.497 0 0 1 .9-.417C4.068 9.357 5.446 10 7 10c1.519 0 2.869-.633 3.44-1.738a.495.495 0 0 1 .668-.212zm.792-1.826a.477.477 0 0 1-.119.692.541.541 0 0 1-.31.084.534.534 0 0 1-.428-.194c-.106-.138-.238-.306-.539-.306-.298 0-.431.168-.54.307A.534.534 0 0 1 9.538 7a.544.544 0 0 1-.31-.084.463.463 0 0 1-.117-.694c.33-.423.742-.722 1.394-.722.653 0 1.068.3 1.396.724zm-7 0a.477.477 0 0 1-.119.692.541.541 0 0 1-.31.084.534.534 0 0 1-.428-.194c-.106-.138-.238-.306-.539-.306-.299 0-.432.168-.54.307A.533.533 0 0 1 2.538 7a.544.544 0 0 1-.31-.084.463.463 0 0 1-.117-.694c.33-.423.742-.722 1.394-.722.653 0 1.068.3 1.396.724zM7 0a7 7 0 1 1 0 14A7 7 0 0 1 7 0zm4.243 11.243A5.96 5.96 0 0 0 13 7a5.96 5.96 0 0 0-1.757-4.243A5.96 5.96 0 0 0 7 1a5.96 5.96 0 0 0-4.243 1.757A5.96 5.96 0 0 0 1 7a5.96 5.96 0 0 0 1.757 4.243A5.96 5.96 0 0 0 7 13a5.96 5.96 0 0 0 4.243-1.757z" fillRule="evenodd"/></svg>';
var threadSvg = '<svg width="14" height="10" xmlns="http://www.w3.org/2000/svg"><path d="M8.516 3c4.78 0 4.972 6.5 4.972 6.5-1.6-2.906-2.847-3.184-4.972-3.184v2.872L3.772 4.994 8.516.5V3zM.484 5l4.5-4.237v1.78L2.416 5l2.568 2.125v1.828L.484 5z" fillRule="evenodd" /></svg>';
var optionsSvg = '<svg width="11" height="3" viewBox="0 0 11 3" xmlns="http://www.w3.org/2000/svg"><path d="M1.5 3a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z" fillRule="nonzero" /></svg>';

var MessageTeam = function (_PureComponent) {
  (0, _inherits2.default)(MessageTeam, _PureComponent);

  var _super = _createSuper(MessageTeam);

  function MessageTeam() {
    var _this;

    (0, _classCallCheck2.default)(this, MessageTeam);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      actionsBoxOpen: false,
      reactionSelectorOpen: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "reactionSelectorRef", _react.default.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "editMessageFormRef", _react.default.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onClickReactionsAction", function () {
      _this.setState({
        reactionSelectorOpen: true
      }, function () {
        return document.addEventListener('click', _this.hideReactions, false);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onClickOptionsAction", function () {
      _this.setState({
        actionsBoxOpen: true
      }, function () {
        return document.addEventListener('click', _this.hideOptions, false);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hideOptions", function () {
      _this.setState({
        actionsBoxOpen: false
      });

      document.removeEventListener('click', _this.hideOptions, false);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hideReactions", function (e) {
      if (!_this.reactionSelectorRef.current.reactionSelector.current.contains(e.target)) {
        _this.setState({
          reactionSelectorOpen: false
        });

        document.removeEventListener('click', _this.hideReactions, false);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMouseLeaveMessage", function () {
      _this.hideOptions();

      _this.setState({
        reactionSelectorOpen: false
      }, function () {
        return document.removeEventListener('click', _this.hideReactions, false);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "formatArray", function (arr) {
      var _this$props = _this.props,
          t = _this$props.t,
          client = _this$props.client;
      var outStr = '';
      var slicedArr = arr.filter(function (item) {
        return item.id !== client.user.id;
      }).map(function (item) {
        return item.name || item.id;
      }).slice(0, 5);
      var restLength = arr.length - slicedArr.length;

      if (slicedArr.length === 1) {
        outStr = slicedArr[0] + ' ';
      } else if (slicedArr.length === 2) {
        outStr = t('{{ firstUser }} and {{ secondUser }}', {
          firstUser: slicedArr[0],
          secondUser: slicedArr[1]
        });
      } else if (slicedArr.length > 2) {
        outStr = t('{{ commaSeparatedUsers }} and {{ moreCount }} more', {
          commaSeparatedUsers: slicedArr.join(', '),
          moreCount: restLength
        });
      }

      return outStr;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderStatus", function () {
      var _this$props2 = _this.props,
          readBy = _this$props2.readBy,
          message = _this$props2.message,
          threadList = _this$props2.threadList,
          client = _this$props2.client,
          lastReceivedId = _this$props2.lastReceivedId,
          t = _this$props2.t;

      if (!_this.isMine() || message.type === 'error') {
        return null;
      }

      var justReadByMe = readBy.length === 1 && readBy[0].id === client.user.id;

      if (message.status === 'sending') {
        return _react.default.createElement("span", {
          className: "str-chat__message-team-status"
        }, _react.default.createElement(_Tooltip.Tooltip, null, t('Sending...')), _react.default.createElement(_LoadingIndicator.LoadingIndicator, {
          isLoading: true
        }));
      } else if (readBy.length !== 0 && !threadList && !justReadByMe) {
        var lastReadUser = readBy.filter(function (item) {
          return item.id !== client.user.id;
        })[0];
        return _react.default.createElement("span", {
          className: "str-chat__message-team-status"
        }, _react.default.createElement(_Tooltip.Tooltip, null, _this.formatArray(readBy)), _react.default.createElement(_Avatar.Avatar, {
          name: lastReadUser.name || lastReadUser.id,
          image: lastReadUser.image,
          size: 15
        }), readBy.length - 1 > 1 && _react.default.createElement("span", {
          className: "str-chat__message-team-status-number"
        }, readBy.length - 1));
      } else if (message.status === 'received' && message.id === lastReceivedId && !threadList) {
        return _react.default.createElement("span", {
          className: "str-chat__message-team-status"
        }, _react.default.createElement(_Tooltip.Tooltip, null, t('Delivered')), _react.default.createElement("svg", {
          width: "16",
          height: "16",
          xmlns: "http://www.w3.org/2000/svg"
        }, _react.default.createElement("path", {
          d: "M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zm3.72 6.633a.955.955 0 1 0-1.352-1.352L6.986 8.663 5.633 7.31A.956.956 0 1 0 4.28 8.663l2.029 2.028a.956.956 0 0 0 1.353 0l4.058-4.058z",
          fill: "#006CFF",
          fillRule: "evenodd"
        })));
      } else {
        return null;
      }
    });
    return _this;
  }

  (0, _createClass2.default)(MessageTeam, [{
    key: "isMine",
    value: function isMine() {
      return this.props.isMyMessage(this.props.message);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('click', this.hideOptions, false);
      document.removeEventListener('click', this.hideReactions, false);
    }
  }, {
    key: "renderAttachments",
    value: function renderAttachments(attachments) {
      var _this$props3 = this.props,
          Attachment = _this$props3.Attachment,
          message = _this$props3.message,
          handleAction = _this$props3.handleAction;
      return attachments.map(function (attachment, index) {
        return _react.default.createElement(Attachment, {
          key: "".concat(message.id, "-").concat(index),
          attachment: attachment,
          actionHandler: handleAction
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          message = _this$props4.message,
          groupStyles = _this$props4.groupStyles,
          editing = _this$props4.editing,
          clearEditingState = _this$props4.clearEditingState,
          updateMessage = _this$props4.updateMessage,
          threadList = _this$props4.threadList,
          initialMessage = _this$props4.initialMessage,
          handleReaction = _this$props4.handleReaction,
          channelConfig = _this$props4.channelConfig,
          handleOpenThread = _this$props4.handleOpenThread,
          Message = _this$props4.Message,
          messageListRect = _this$props4.messageListRect,
          onMentionsHoverMessage = _this$props4.onMentionsHoverMessage,
          onMentionsClickMessage = _this$props4.onMentionsClickMessage,
          unsafeHTML = _this$props4.unsafeHTML,
          handleRetry = _this$props4.handleRetry,
          getMessageActions = _this$props4.getMessageActions,
          isMyMessage = _this$props4.isMyMessage,
          handleFlag = _this$props4.handleFlag,
          handleMute = _this$props4.handleMute,
          handleEdit = _this$props4.handleEdit,
          handleDelete = _this$props4.handleDelete,
          t = _this$props4.t,
          tDateTimeParser = _this$props4.tDateTimeParser;

      if (message.type === 'message.read') {
        return null;
      }

      var hasAttachment = Boolean(message.attachments && message.attachments.length);

      if (message.deleted_at) {
        return null;
      }

      var galleryImages = message.attachments && message.attachments.filter(function (item) {
        return item.type === 'image';
      });
      var attachments = message.attachments;

      if (galleryImages && galleryImages.length > 1) {
        attachments = message.attachments.filter(function (item) {
          return item.type !== 'image';
        });
      } else {
        galleryImages = [];
      }

      var reactionDirection = 'left';

      if (editing) {
        return _react.default.createElement("div", {
          className: "str-chat__message-team str-chat__message-team--".concat(groupStyles[0], " str-chat__message-team--editing"),
          onMouseLeave: this.onMouseLeaveMessage
        }, (groupStyles[0] === 'top' || groupStyles[0] === 'single') && _react.default.createElement("div", {
          className: "str-chat__message-team-meta"
        }, _react.default.createElement(_Avatar.Avatar, {
          image: message.user.image,
          name: message.user.name || message.user.id,
          size: 40
        })), _react.default.createElement(_MessageInput.MessageInput, {
          Input: _EditMessageForm.EditMessageForm,
          message: message,
          clearEditingState: clearEditingState,
          updateMessage: updateMessage
        }));
      }

      return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("div", {
        className: "str-chat__message-team str-chat__message-team--".concat(groupStyles[0], " str-chat__message-team--").concat(message.type, " ").concat(threadList ? 'thread-list' : '', " str-chat__message-team--").concat(message.status),
        onMouseLeave: this.onMouseLeaveMessage
      }, _react.default.createElement("div", {
        className: "str-chat__message-team-meta"
      }, groupStyles[0] === 'top' || groupStyles[0] === 'single' || initialMessage ? _react.default.createElement(_Avatar.Avatar, {
        image: message.user.image,
        name: message.user.name || message.user.id,
        size: 40
      }) : _react.default.createElement("div", {
        style: {
          width: 40,
          marginRight: 0
        }
      }), _react.default.createElement("time", {
        dateTime: message.created_at,
        title: message.created_at
      }, Boolean(Date.parse(message.created_at)) && tDateTimeParser(message.created_at).format('h:mmA'))), _react.default.createElement("div", {
        className: "str-chat__message-team-group"
      }, (groupStyles[0] === 'top' || groupStyles[0] === 'single' || initialMessage) && _react.default.createElement("div", {
        className: "str-chat__message-team-author"
      }, _react.default.createElement("strong", null, message.user.name || message.user.id), message.type === 'error' && _react.default.createElement("div", {
        className: "str-chat__message-team-error-header"
      }, t('Only visible to you'))), _react.default.createElement("div", {
        className: "str-chat__message-team-content str-chat__message-team-content--".concat(groupStyles[0], " str-chat__message-team-content--").concat(message.text === '' ? 'image' : 'text')
      }, !initialMessage && message.status !== 'sending' && message.status !== 'failed' && message.type !== 'system' && message.type !== 'ephemeral' && message.type !== 'error' && _react.default.createElement("div", {
        className: "str-chat__message-team-actions"
      }, this.state.reactionSelectorOpen && _react.default.createElement(_ReactionSelector.ReactionSelector, {
        handleReaction: handleReaction,
        latest_reactions: message.latest_reactions,
        reaction_counts: message.reaction_counts,
        detailedView: true,
        direction: reactionDirection,
        ref: this.reactionSelectorRef
      }), channelConfig && channelConfig.reactions && _react.default.createElement("span", {
        title: "Reactions",
        dangerouslySetInnerHTML: {
          __html: reactionSvg
        },
        onClick: this.onClickReactionsAction
      }), !threadList && channelConfig && channelConfig.replies && _react.default.createElement("span", {
        title: "Start a thread",
        dangerouslySetInnerHTML: {
          __html: threadSvg
        },
        onClick: function onClick(e) {
          return handleOpenThread(e, message);
        }
      }), getMessageActions().length > 0 && _react.default.createElement("span", {
        onClick: this.onClickOptionsAction
      }, _react.default.createElement("span", {
        title: "Message actions",
        dangerouslySetInnerHTML: {
          __html: optionsSvg
        }
      }), _react.default.createElement(_MessageActionsBox.MessageActionsBox, {
        getMessageActions: getMessageActions,
        Message: Message,
        open: this.state.actionsBoxOpen,
        message: message,
        messageListRect: messageListRect,
        mine: isMyMessage(message),
        handleFlag: handleFlag,
        handleMute: handleMute,
        handleEdit: handleEdit,
        handleDelete: handleDelete
      }))), _react.default.createElement("span", {
        className: (0, _utils.isOnlyEmojis)(message.text) ? 'str-chat__message-team-text--is-emoji' : '',
        onMouseOver: onMentionsHoverMessage,
        onClick: onMentionsClickMessage
      }, unsafeHTML ? _react.default.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: message.html
        }
      }) : (0, _utils.renderText)(message)), galleryImages.length !== 0 && _react.default.createElement(_Gallery.Gallery, {
        images: galleryImages
      }), message.text === '' && this.renderAttachments(attachments), message.latest_reactions && message.latest_reactions.length !== 0 && message.text !== '' && _react.default.createElement(_SimpleReactionsList.SimpleReactionsList, {
        reaction_counts: message.reaction_counts,
        handleReaction: handleReaction,
        reactions: message.latest_reactions
      }), message.status === 'failed' && _react.default.createElement("button", {
        className: "str-chat__message-team-failed",
        onClick: handleRetry.bind(this, message)
      }, _react.default.createElement("svg", {
        width: "14",
        height: "14",
        xmlns: "http://www.w3.org/2000/svg"
      }, _react.default.createElement("path", {
        d: "M7 0a7 7 0 1 0 0 14A7 7 0 0 0 7 0zm.875 10.938a.438.438 0 0 1-.438.437h-.875a.438.438 0 0 1-.437-.438v-.874c0-.242.196-.438.438-.438h.875c.241 0 .437.196.437.438v.874zm0-2.626a.438.438 0 0 1-.438.438h-.875a.438.438 0 0 1-.437-.438v-5.25c0-.241.196-.437.438-.437h.875c.241 0 .437.196.437.438v5.25z",
        fill: "#EA152F",
        fillRule: "evenodd"
      })), t('Message failed. Click to try again.'))), this.renderStatus(), message.text !== '' && hasAttachment && this.renderAttachments(attachments), message.latest_reactions && message.latest_reactions.length !== 0 && message.text === '' && _react.default.createElement(_SimpleReactionsList.SimpleReactionsList, {
        reaction_counts: message.reaction_counts,
        handleReaction: handleReaction,
        reactions: message.latest_reactions
      }), !threadList && _react.default.createElement(_MessageRepliesCountButton.MessageRepliesCountButton, {
        onClick: handleOpenThread,
        reply_count: message.reply_count
      }))));
    }
  }]);
  return MessageTeam;
}(_react.PureComponent);

exports.MessageTeam = MessageTeam;
(0, _defineProperty2.default)(MessageTeam, "propTypes", {
  message: _propTypes.default.object,
  Attachment: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  Message: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func, _propTypes.default.object]).isRequired,
  unsafeHTML: _propTypes.default.bool,
  client: _propTypes.default.object,
  initialMessage: _propTypes.default.bool,
  channelConfig: _propTypes.default.object,
  threadList: _propTypes.default.bool,
  handleOpenThread: _propTypes.default.func,
  editing: _propTypes.default.bool,
  clearEditingState: _propTypes.default.func,
  isMyMessage: _propTypes.default.func,
  getMessageActions: _propTypes.default.func,
  updateMessage: _propTypes.default.func,
  handleRetry: _propTypes.default.func,
  handleReaction: _propTypes.default.func,
  messageListRect: _propTypes.default.object,
  handleAction: _propTypes.default.func,
  onMentionsHoverMessage: _propTypes.default.func,
  onMentionsClickMessage: _propTypes.default.func,
  groupStyles: _propTypes.default.array
});
(0, _defineProperty2.default)(MessageTeam, "defaultProps", {
  Attachment: _Attachment.Attachment,
  groupStyles: ['single']
});
exports.MessageTeam = MessageTeam = (0, _context.withTranslationContext)(MessageTeam);