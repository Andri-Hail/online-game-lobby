"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventComponent = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _Avatar = require("./Avatar");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _context = require("../context");

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var EventComponent = function (_React$PureComponent) {
  (0, _inherits2.default)(EventComponent, _React$PureComponent);

  var _super = _createSuper(EventComponent);

  function EventComponent() {
    (0, _classCallCheck2.default)(this, EventComponent);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(EventComponent, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          message = _this$props.message,
          tDateTimeParser = _this$props.tDateTimeParser;

      if (message.type === 'system') {
        return _react.default.createElement("div", {
          className: "str-chat__message--system"
        }, _react.default.createElement("div", {
          className: "str-chat__message--system__text"
        }, _react.default.createElement("div", {
          className: "str-chat__message--system__line"
        }), _react.default.createElement("p", null, message.text), _react.default.createElement("div", {
          className: "str-chat__message--system__line"
        })), _react.default.createElement("div", {
          className: "str-chat__message--system__date"
        }, _react.default.createElement("strong", null, tDateTimeParser(message.created_at).format('dddd'), ' '), "at ", tDateTimeParser(message.created_at).format('hh:mm A')));
      }

      if (message.type === 'channel.event' && (message.event.type === 'member.removed' || message.event.type === 'member.added')) {
        var sentence;

        switch (message.event.type) {
          case 'member.removed':
            sentence = "".concat(message.event.user.name || message.event.user.id, " was removed from the chat");
            break;

          case 'member.added':
            sentence = "".concat(message.event.user.name || message.event.user.id, " has joined the chat");
            break;

          default:
            break;
        }

        return _react.default.createElement("div", {
          className: "str-chat__event-component__channel-event"
        }, _react.default.createElement(_Avatar.Avatar, {
          image: message.event.user.image,
          name: message.event.user.name || message.event.user.id
        }), _react.default.createElement("div", {
          className: "str-chat__event-component__channel-event__content"
        }, _react.default.createElement("em", {
          className: "str-chat__event-component__channel-event__sentence"
        }, sentence), _react.default.createElement("div", {
          className: "str-chat__event-component__channel-event__date"
        }, tDateTimeParser(message.created_at).format('LT'))));
      }

      return null;
    }
  }]);
  return EventComponent;
}(_react.default.PureComponent);

exports.EventComponent = EventComponent;
(0, _defineProperty2.default)(EventComponent, "propTypes", {
  message: _propTypes.default.object
});
exports.EventComponent = EventComponent = (0, _context.withTranslationContext)(EventComponent);