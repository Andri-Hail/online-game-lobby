"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChatAutoComplete = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _AutoCompleteTextarea = _interopRequireDefault(require("./AutoCompleteTextarea"));

var _LoadingIndicator = require("./LoadingIndicator");

var _emojiMart = require("emoji-mart");

var _EmoticonItem = require("./EmoticonItem");

var _UserItem = require("./UserItem");

var _CommandItem = require("./CommandItem");

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var ChatAutoComplete = function (_PureComponent) {
  (0, _inherits2.default)(ChatAutoComplete, _PureComponent);

  var _super = _createSuper(ChatAutoComplete);

  function ChatAutoComplete() {
    (0, _classCallCheck2.default)(this, ChatAutoComplete);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(ChatAutoComplete, [{
    key: "getTriggers",
    value: function getTriggers() {
      var _this = this;

      return {
        ':': {
          dataProvider: function dataProvider(q) {
            if (q.length === 0 || q.charAt(0).match(/[^a-zA-Z0-9+-]/)) {
              return [];
            }

            var emojis = _emojiMart.emojiIndex.search(q) || [];
            return emojis.slice(0, 10);
          },
          component: _EmoticonItem.EmoticonItem,
          output: function output(entity) {
            return {
              key: entity.id,
              text: "".concat(entity.native),
              caretPosition: 'next'
            };
          }
        },
        '@': {
          dataProvider: function dataProvider(q) {
            var matchingUsers = _this.props.users.filter(function (user) {
              if (user.name !== undefined && user.name.toLowerCase().indexOf(q.toLowerCase()) !== -1) {
                return true;
              } else if (user.id.toLowerCase().indexOf(q.toLowerCase()) !== -1) {
                return true;
              } else {
                return false;
              }
            });

            return matchingUsers.slice(0, 10);
          },
          component: _UserItem.UserItem,
          output: function output(entity) {
            return {
              key: entity.id,
              text: "@".concat(entity.name || entity.id),
              caretPosition: 'next'
            };
          },
          callback: function callback(item) {
            return _this.props.onSelectItem(item);
          }
        },
        '/': {
          dataProvider: function dataProvider(q, text) {
            if (text.indexOf('/') !== 0) {
              return [];
            }

            var selectedCommands = _this.props.commands.filter(function (c) {
              return c.name.indexOf(q) !== -1;
            });

            selectedCommands.sort(function (a, b) {
              var nameA = a.name.toLowerCase();
              var nameB = b.name.toLowerCase();

              if (nameA.indexOf(q) === 0) {
                nameA = "0".concat(nameA);
              }

              if (nameB.indexOf(q) === 0) {
                nameB = "0".concat(nameB);
              }

              if (nameA < nameB) {
                return -1;
              }

              if (nameA > nameB) {
                return 1;
              }

              return 0;
            });
            return selectedCommands.slice(0, 10);
          },
          component: _CommandItem.CommandItem,
          output: function output(entity) {
            return {
              key: entity.id,
              text: "/".concat(entity.name),
              caretPosition: 'next'
            };
          }
        }
      };
    }
  }, {
    key: "emojiReplace",
    value: function emojiReplace(word) {
      var found = _emojiMart.emojiIndex.search(word) || [];

      var _iterator = _createForOfIteratorHelper(found.slice(0, 10)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var emoji = _step.value;

          if (emoji.emoticons.includes(word)) {
            return emoji.native;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var innerRef = this.props.innerRef;
      return _react.default.createElement(_AutoCompleteTextarea.default, {
        loadingComponent: _LoadingIndicator.LoadingIndicator,
        trigger: this.getTriggers(),
        replaceWord: this.emojiReplace,
        minChar: 0,
        maxRows: this.props.maxRows,
        innerRef: innerRef && function (ref) {
          innerRef.current = ref;
        },
        onFocus: this.props.onFocus,
        rows: this.props.rows,
        className: "str-chat__textarea__textarea",
        containerClassName: "str-chat__textarea",
        dropdownClassName: "str-chat__emojisearch",
        listClassName: "str-chat__emojisearch__list",
        itemClassName: "str-chat__emojisearch__item",
        placeholder: this.props.placeholder,
        onChange: this.props.onChange,
        handleSubmit: this.props.handleSubmit,
        onPaste: this.props.onPaste,
        value: this.props.value,
        grow: this.props.grow,
        disabled: this.props.disabled,
        additionalTextareaProps: this.props.additionalTextareaProps
      });
    }
  }]);
  return ChatAutoComplete;
}(_react.PureComponent);

exports.ChatAutoComplete = ChatAutoComplete;
(0, _defineProperty2.default)(ChatAutoComplete, "propTypes", {
  rows: _propTypes.default.number,
  grow: _propTypes.default.bool,
  maxRows: _propTypes.default.number,
  disabled: _propTypes.default.bool,
  value: _propTypes.default.string,
  onPaste: _propTypes.default.func,
  handleSubmit: _propTypes.default.func,
  onChange: _propTypes.default.func,
  placeholder: _propTypes.default.string,
  LoadingIndicator: _propTypes.default.node,
  minChar: _propTypes.default.number,
  users: _propTypes.default.array,
  onSelectItem: _propTypes.default.func,
  commands: _propTypes.default.array,
  onFocus: _propTypes.default.object,
  additionalTextareaProps: _propTypes.default.object
});
(0, _defineProperty2.default)(ChatAutoComplete, "defaultProps", {
  rows: 3
});