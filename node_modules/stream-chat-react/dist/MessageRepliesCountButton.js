"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageRepliesCountButton = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _context = require("../context");

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var MessageRepliesCountButton = function (_React$PureComponent) {
  (0, _inherits2.default)(MessageRepliesCountButton, _React$PureComponent);

  var _super = _createSuper(MessageRepliesCountButton);

  function MessageRepliesCountButton() {
    (0, _classCallCheck2.default)(this, MessageRepliesCountButton);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(MessageRepliesCountButton, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          reply_count = _this$props.reply_count,
          labelSingle = _this$props.labelSingle,
          labelPlural = _this$props.labelPlural,
          t = _this$props.t;
      var singleReplyText;
      var pluralReplyText;

      if (reply_count === 1) {
        if (labelSingle) {
          singleReplyText = "1 ".concat(labelSingle);
        } else {
          singleReplyText = t('1 reply');
        }
      }

      if (reply_count > 1) {
        if (labelPlural) {
          pluralReplyText = "".concat(reply_count, " ").concat(labelPlural);
        } else {
          pluralReplyText = t('{{ replyCount }} replies', {
            replyCount: reply_count
          });
        }
      }

      if (reply_count && reply_count !== 0) {
        return _react.default.createElement("button", {
          className: "str-chat__message-replies-count-button",
          onClick: this.props.onClick
        }, _react.default.createElement("svg", {
          width: "18",
          height: "15",
          xmlns: "http://www.w3.org/2000/svg"
        }, _react.default.createElement("path", {
          d: "M.56 10.946H.06l-.002-.498L.025.92a.5.5 0 1 1 1-.004l.032 9.029H9.06v-4l9 4.5-9 4.5v-4H.56z",
          fillRule: "nonzero"
        })), reply_count === 1 ? singleReplyText : pluralReplyText);
      }

      return null;
    }
  }]);
  return MessageRepliesCountButton;
}(_react.default.PureComponent);

exports.MessageRepliesCountButton = MessageRepliesCountButton;
(0, _defineProperty2.default)(MessageRepliesCountButton, "propTypes", {
  labelSingle: _propTypes.default.string,
  labelPlural: _propTypes.default.string,
  reply_count: _propTypes.default.number,
  onClick: _propTypes.default.func
});
(0, _defineProperty2.default)(MessageRepliesCountButton, "defaultProps", {
  reply_count: 0
});
exports.MessageRepliesCountButton = MessageRepliesCountButton = (0, _context.withTranslationContext)(MessageRepliesCountButton);