"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Attachment = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactPlayer = _interopRequireDefault(require("react-player"));

var _Card = _interopRequireDefault(require("./Card"));

var _Image = require("./Image");

var _AttachmentActions = require("./AttachmentActions");

var _reactFileUtils = require("react-file-utils");

var _prettyBytes = _interopRequireDefault(require("pretty-bytes"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _SafeAnchor = require("./SafeAnchor");

var _Audio = require("./Audio");

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Attachment = function (_PureComponent) {
  (0, _inherits2.default)(Attachment, _PureComponent);

  var _super = _createSuper(Attachment);

  function Attachment() {
    var _this;

    (0, _classCallCheck2.default)(this, Attachment);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "attachmentRef", _react.default.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderAttachmentActions", function (a) {
      return _react.default.createElement(_AttachmentActions.AttachmentActions, (0, _extends2.default)({
        key: 'key-actions-' + a.id
      }, a, {
        actionHandler: _this.props.actionHandler
      }));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderAttachment", function (a) {
      return _react.default.createElement("div", {
        className: "str-chat__attachment",
        key: "key-image-".concat(a.id)
      }, _react.default.createElement(_Card.default, (0, _extends2.default)({}, a, {
        key: "key-card-".concat(a.id)
      })), _this.renderAttachmentActions(a));
    });
    return _this;
  }

  (0, _createClass2.default)(Attachment, [{
    key: "attachmentType",
    value: function attachmentType(a) {
      var type, extra;

      if (a.actions && a.actions.length > 0) {
        extra = 'actions';
      }

      if (a.type === 'giphy' || a.type === 'imgur') {
        type = 'card';
      } else if (a.type === 'image' && (a.title_link || a.og_scrape_url)) {
        type = 'card';
      } else if (a.type === 'image') {
        type = 'image';
      } else if (a.type === 'file') {
        type = 'file';
      } else if (a.type === 'audio') {
        type = 'audio';
      } else if (a.type === 'video') {
        type = 'media';
      } else {
        type = 'card';
        extra = 'no-image';
      }

      return {
        type,
        extra
      };
    }
  }, {
    key: "render",
    value: function render() {
      var a = this.props.attachment;

      if (!a) {
        return null;
      }

      var _this$attachmentType = this.attachmentType(a),
          type = _this$attachmentType.type,
          extra = _this$attachmentType.extra;

      if (type === 'card' && !a.title_link && !a.og_scrape_url) {
        return null;
      }

      var results = [];

      if (type === 'image') {
        if (a.actions && a.actions.length) {
          results.push(_react.default.createElement("div", {
            className: "str-chat__attachment",
            key: "key-image-".concat(a.id)
          }, _react.default.createElement(_Image.Image, a), this.renderAttachmentActions(a)));
        } else {
          results.push(_react.default.createElement(_Image.Image, (0, _extends2.default)({}, a, {
            key: "key-image-".concat(a.id)
          })));
        }
      } else if (type === 'file') {
        a.asset_url && results.push(_react.default.createElement("div", {
          className: "str-chat__message-attachment-file--item",
          key: "key-file-".concat(a.id)
        }, _react.default.createElement(_reactFileUtils.FileIcon, {
          mimeType: a.mime_type,
          filename: a.title,
          big: true,
          size: 30
        }), _react.default.createElement("div", {
          className: "str-chat__message-attachment-file--item-text"
        }, _react.default.createElement(_SafeAnchor.SafeAnchor, {
          href: a.asset_url,
          target: "_blank",
          download: true
        }, a.title), a.file_size && _react.default.createElement("span", null, (0, _prettyBytes.default)(a.file_size)))));
      } else if (type === 'audio') {
        results.push(_react.default.createElement("div", {
          className: "str-chat__attachment",
          key: "key-video-".concat(a.id)
        }, _react.default.createElement(_Audio.Audio, {
          og: a
        })));
      } else if (type === 'media') {
        if (a.actions && a.actions.length) {
          results.push(_react.default.createElement("div", {
            className: "str-chat__attachment",
            key: "key-video-".concat(a.id)
          }, _react.default.createElement("div", {
            className: "str-chat__player-wrapper"
          }, _react.default.createElement(_reactPlayer.default, {
            className: "react-player",
            url: a.asset_url,
            width: "100%",
            height: "100%",
            controls: true
          })), this.renderAttachmentActions(a)));
        } else {
          results.push(_react.default.createElement("div", {
            className: "str-chat__player-wrapper",
            key: "key-video-".concat(a.id)
          }, _react.default.createElement(_reactPlayer.default, {
            className: "react-player",
            url: a.asset_url,
            width: "100%",
            height: "100%",
            controls: true
          })));
        }
      } else {
        if (a.actions && a.actions.length) {
          results.push(this.renderAttachment(a));
        } else {
          results.push(_react.default.createElement(_Card.default, (0, _extends2.default)({}, a, {
            key: "key-card-".concat(a.id)
          })));
        }
      }

      if (results.length === 0) return null;
      return _react.default.createElement("div", {
        className: "str-chat__message-attachment str-chat__message-attachment--".concat(type, " str-chat__message-attachment--").concat(a.type, " str-chat__message-attachment--").concat(type, "--").concat(extra),
        ref: this.attachmentRef
      }, results);
    }
  }]);
  return Attachment;
}(_react.PureComponent);

exports.Attachment = Attachment;
(0, _defineProperty2.default)(Attachment, "propTypes", {
  attachment: _propTypes.default.object.isRequired,
  actionHandler: _propTypes.default.func.isRequired
});
Attachment.propTypes = {};