"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Message = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _deepEqual = _interopRequireDefault(require("deep-equal"));

var _MessageSimple = require("./MessageSimple");

var _Attachment = require("./Attachment");

var _utils = require("../utils");

var _context7 = require("../context");

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Message = function (_Component) {
  (0, _inherits2.default)(Message, _Component);

  var _super = _createSuper(Message);

  function Message(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Message);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isMyMessage", function (message) {
      return _this.props.client.user.id === message.user.id;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isAdmin", function () {
      return _this.props.client.user.role === 'admin' || _this.props.channel.state && _this.props.channel.state.membership && _this.props.channel.state.membership.role === 'admin';
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isOwner", function () {
      return _this.props.channel.state && _this.props.channel.state.membership && _this.props.channel.state.membership.role === 'owner';
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isModerator", function () {
      return _this.props.channel.state && _this.props.channel.state.membership && (_this.props.channel.state.membership.role === 'channel_moderator' || _this.props.channel.state.membership.role === 'moderator');
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "canEditMessage", function (message) {
      return _this.isMyMessage(message) || _this.isModerator() || _this.isOwner() || _this.isAdmin();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "canDeleteMessage", function (message) {
      return _this.canEditMessage(message);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "validateAndGetNotificationMessage", function (func, args) {
      if (!func || typeof func !== 'function') return false;
      var returnValue = func.apply(null, args);
      if (typeof returnValue !== 'string') return false;
      return returnValue;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFlag", function () {
      var _ref = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(event) {
        var _this$props, getFlagMessageSuccessNotification, getFlagMessageErrorNotification, message, client, addNotification, t, successMessage, errorMessage;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();
                _this$props = _this.props, getFlagMessageSuccessNotification = _this$props.getFlagMessageSuccessNotification, getFlagMessageErrorNotification = _this$props.getFlagMessageErrorNotification, message = _this$props.message, client = _this$props.client, addNotification = _this$props.addNotification, t = _this$props.t;
                _context.prev = 2;
                _context.next = 5;
                return client.flagMessage(message.id);

              case 5:
                successMessage = _this.validateAndGetNotificationMessage(getFlagMessageSuccessNotification, [message]);
                addNotification(successMessage ? successMessage : t('Message has been successfully flagged'), 'success');
                _context.next = 13;
                break;

              case 9:
                _context.prev = 9;
                _context.t0 = _context["catch"](2);
                errorMessage = _this.validateAndGetNotificationMessage(getFlagMessageErrorNotification, [message]);
                addNotification(errorMessage ? errorMessage : t('Error adding flag: Either the flag already exist or there is issue with network connection ...'), 'error');

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[2, 9]]);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMute", function () {
      var _ref2 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(event) {
        var _this$props2, getMuteUserSuccessNotification, getMuteUserErrorNotification, message, client, addNotification, t, successMessage, errorMessage;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                event.preventDefault();
                _this$props2 = _this.props, getMuteUserSuccessNotification = _this$props2.getMuteUserSuccessNotification, getMuteUserErrorNotification = _this$props2.getMuteUserErrorNotification, message = _this$props2.message, client = _this$props2.client, addNotification = _this$props2.addNotification, t = _this$props2.t;
                _context2.prev = 2;
                _context2.next = 5;
                return client.muteUser(message.user.id);

              case 5:
                successMessage = _this.validateAndGetNotificationMessage(getMuteUserSuccessNotification, [message.user]);
                addNotification(successMessage ? successMessage : t("{{ user }} has been muted", {
                  user: message.user.name || message.user.id
                }), 'success');
                _context2.next = 13;
                break;

              case 9:
                _context2.prev = 9;
                _context2.t0 = _context2["catch"](2);
                errorMessage = _this.validateAndGetNotificationMessage(getMuteUserErrorNotification, [message.user]);
                addNotification(errorMessage ? errorMessage : t('Error muting a user ...'), 'error');

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[2, 9]]);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleEdit", function (event) {
      var _this$props3 = _this.props,
          setEditingState = _this$props3.setEditingState,
          message = _this$props3.message;

      if (event !== undefined && event.preventDefault) {
        event.preventDefault();
      }

      setEditingState(message);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDelete", function () {
      var _ref3 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(event) {
        var _this$props4, message, client, updateMessage, data;

        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                event.preventDefault();
                _this$props4 = _this.props, message = _this$props4.message, client = _this$props4.client, updateMessage = _this$props4.updateMessage;
                _context3.next = 4;
                return client.deleteMessage(message.id);

              case 4:
                data = _context3.sent;
                updateMessage(data.message);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleReaction", function () {
      var _ref4 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(reactionType, event) {
        var userExistingReaction, currentUser, _iterator, _step, _reaction, originalMessage, reactionChangePromise, messageID, reaction;

        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (event !== undefined && event.preventDefault) {
                  event.preventDefault();
                }

                userExistingReaction = null;
                currentUser = _this.props.client.userID;
                _iterator = _createForOfIteratorHelper(_this.props.message.own_reactions);

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    _reaction = _step.value;

                    if (currentUser === _reaction.user.id && _reaction.type === reactionType) {
                      userExistingReaction = _reaction;
                    } else if (currentUser !== _reaction.user.id) {
                      console.warn("message.own_reactions contained reactions from a different user, this indicates a bug");
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                originalMessage = _this.props.message;

                if (userExistingReaction) {
                  reactionChangePromise = _this.props.channel.deleteReaction(_this.props.message.id, userExistingReaction.type);
                } else {
                  messageID = _this.props.message.id;
                  reaction = {
                    type: reactionType
                  };
                  reactionChangePromise = _this.props.channel.sendReaction(messageID, reaction);
                }

                _context4.prev = 7;
                _context4.next = 10;
                return reactionChangePromise;

              case 10:
                _context4.next = 15;
                break;

              case 12:
                _context4.prev = 12;
                _context4.t0 = _context4["catch"](7);

                _this.props.updateMessage(originalMessage);

              case 15:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, null, [[7, 12]]);
      }));

      return function (_x4, _x5) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleAction", function () {
      var _ref5 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5(name, value, event) {
        var messageID, formData, data;
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                event.preventDefault();
                messageID = _this.props.message.id;
                formData = {};
                formData[name] = value;
                _context5.next = 6;
                return _this.props.channel.sendAction(messageID, formData);

              case 6:
                data = _context5.sent;

                if (data && data.message) {
                  _this.props.updateMessage(data.message);
                } else {
                  _this.props.removeMessage(_this.props.message);
                }

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x6, _x7, _x8) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleRetry", function () {
      var _ref6 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee6(message) {
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return _this.props.retrySendMessage(message);

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x9) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMentionsClick", function (e) {
      if (typeof _this.props.onMentionsClick !== 'function') {
        return;
      }

      _this.props.onMentionsClick(e, _this.props.message.mentioned_users);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMentionsHover", function (e) {
      var _this$props5 = _this.props,
          onMentionsHover = _this$props5.onMentionsHover,
          message = _this$props5.message;

      if (typeof onMentionsHover !== 'function') {
        return;
      }

      onMentionsHover(e, message.mentioned_users);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getMessageActions", function () {
      var _this$props6 = _this.props,
          message = _this$props6.message,
          messageActionsProps = _this$props6.messageActions;

      var _this$props$channel$g = _this.props.channel.getConfig(),
          mutes = _this$props$channel$g.mutes;

      var messageActionsAfterPermission = [];
      var messageActions = [];

      if (messageActionsProps && typeof messageActionsProps === 'boolean') {
        messageActions = Object.keys(_utils.MESSAGE_ACTIONS);
      } else if (messageActionsProps && messageActionsProps.length > 0) {
        messageActions = (0, _toConsumableArray2.default)(messageActionsProps);
      } else {
        return [];
      }

      if (_this.canEditMessage(message) && messageActions.indexOf(_utils.MESSAGE_ACTIONS.edit) > -1) {
        messageActionsAfterPermission.push(_utils.MESSAGE_ACTIONS.edit);
      }

      if (_this.canDeleteMessage(message) && messageActions.indexOf(_utils.MESSAGE_ACTIONS.delete) > -1) {
        messageActionsAfterPermission.push(_utils.MESSAGE_ACTIONS.delete);
      }

      if (!_this.isMyMessage(message) && messageActions.indexOf(_utils.MESSAGE_ACTIONS.flag) > -1) {
        messageActionsAfterPermission.push(_utils.MESSAGE_ACTIONS.flag);
      }

      if (!_this.isMyMessage(message) && messageActions.indexOf(_utils.MESSAGE_ACTIONS.mute) > -1 && mutes) {
        messageActionsAfterPermission.push(_utils.MESSAGE_ACTIONS.mute);
      }

      return messageActionsAfterPermission;
    });
    _this.state = {
      loading: false
    };
    return _this;
  }

  (0, _createClass2.default)(Message, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      var shouldUpdate = nextProps.message !== this.props.message;
      var reason = '';

      if (shouldUpdate) {
        reason = 'message';
      }

      if (!shouldUpdate && !(0, _deepEqual.default)(nextProps.readBy, this.props.readBy)) {
        shouldUpdate = true;
        reason = 'readBy';
      }

      if (!shouldUpdate && !(0, _deepEqual.default)(nextProps.groupStyles, this.props.groupStyles)) {
        shouldUpdate = true;
        reason = 'groupStyles';
      }

      if (!shouldUpdate && !(0, _deepEqual.default)(nextProps.lastReceivedId, this.props.lastReceivedId)) {
        shouldUpdate = true;
        reason = 'lastReceivedId';
      }

      if (!shouldUpdate && nextProps.editing !== this.props.editing) {
        shouldUpdate = true;
        reason = 'editing';
      }

      if (!shouldUpdate && nextProps.messageListRect !== this.props.messageListRect) {
        shouldUpdate = true;
        reason = 'messageListRect';
      }

      if (shouldUpdate && reason) {}

      return shouldUpdate;
    }
  }, {
    key: "render",
    value: function render() {
      var config = this.props.channel.getConfig();
      var message = this.props.message;
      var actionsEnabled = message.type === 'regular' && message.status === 'received';
      var Component = this.props.Message;
      return _react.default.createElement(Component, (0, _extends2.default)({}, this.props, {
        actionsEnabled: actionsEnabled,
        Message: this,
        handleReaction: this.handleReaction,
        getMessageActions: this.getMessageActions,
        handleFlag: this.handleFlag,
        handleMute: this.handleMute,
        handleAction: this.handleAction,
        handleDelete: this.handleDelete,
        handleEdit: this.handleEdit,
        handleRetry: this.handleRetry,
        handleOpenThread: this.props.openThread && this.props.openThread.bind(this, message),
        isMyMessage: this.isMyMessage,
        channelConfig: config,
        onMentionsClickMessage: this.onMentionsClick,
        onMentionsHoverMessage: this.onMentionsHover
      }));
    }
  }]);
  return Message;
}(_react.Component);

exports.Message = Message;
(0, _defineProperty2.default)(Message, "propTypes", {
  message: _propTypes.default.object.isRequired,
  client: _propTypes.default.object.isRequired,
  channel: _propTypes.default.object.isRequired,
  readBy: _propTypes.default.array,
  groupStyles: _propTypes.default.array,
  editing: _propTypes.default.bool,
  Message: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  Attachment: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  unsafeHTML: _propTypes.default.bool,
  messageActions: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.array]),
  getFlagMessageSuccessNotification: _propTypes.default.func,
  getFlagMessageErrorNotification: _propTypes.default.func,
  getMuteUserSuccessNotification: _propTypes.default.func,
  getMuteUserErrorNotification: _propTypes.default.func,
  lastReceivedId: _propTypes.default.string,
  messageListRect: _propTypes.default.object,
  members: _propTypes.default.object,
  addNotification: _propTypes.default.func,
  setEditingState: _propTypes.default.func,
  updateMessage: _propTypes.default.func,
  removeMessage: _propTypes.default.func,
  retrySendMessage: _propTypes.default.func,
  onMentionsClick: _propTypes.default.func,
  onMentionsHover: _propTypes.default.func,
  openThread: _propTypes.default.func,
  clearEditingState: _propTypes.default.func,
  additionalMessageInputProps: _propTypes.default.object
});
(0, _defineProperty2.default)(Message, "defaultProps", {
  Message: _MessageSimple.MessageSimple,
  readBy: [],
  groupStyles: [],
  Attachment: _Attachment.Attachment,
  editing: false,
  messageActions: Object.keys(_utils.MESSAGE_ACTIONS)
});
exports.Message = Message = (0, _context7.withTranslationContext)(Message);