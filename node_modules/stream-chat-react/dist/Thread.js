"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Thread = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _context3 = require("../context");

var _MessageList = require("./MessageList");

var _MessageInput = require("./MessageInput");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Message = require("./Message");

var _MessageInputSmall = require("./MessageInputSmall");

var _utils = require("../utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Thread = function (_React$PureComponent) {
  (0, _inherits2.default)(Thread, _React$PureComponent);

  var _super = _createSuper(Thread);

  function Thread() {
    (0, _classCallCheck2.default)(this, Thread);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(Thread, [{
    key: "render",
    value: function render() {
      if (!this.props.thread) {
        return null;
      }

      var parentID = this.props.thread.id;
      var cid = this.props.channel.cid;
      var key = "thread-".concat(parentID, "-").concat(cid);
      return _react.default.createElement(ThreadInner, (0, _extends2.default)({}, this.props, {
        key: key
      }));
    }
  }]);
  return Thread;
}(_react.default.PureComponent);

exports.Thread = Thread;
(0, _defineProperty2.default)(Thread, "propTypes", {
  fullWidth: _propTypes.default.bool,
  autoFocus: _propTypes.default.bool,
  channel: _propTypes.default.object.isRequired,
  Message: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  thread: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.bool]),
  threadMessages: _propTypes.default.array.isRequired,
  loadMoreThread: _propTypes.default.func.isRequired,
  threadHasMore: _propTypes.default.bool,
  threadLoadingMore: _propTypes.default.bool,
  additionalParentMessageProps: _propTypes.default.object,
  additionalMessageListProps: _propTypes.default.object,
  additionalMessageInputProps: _propTypes.default.object,
  MessageInput: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func])
});
(0, _defineProperty2.default)(Thread, "defaultProps", {
  threadHasMore: true,
  threadLoadingMore: true,
  fullWidth: false,
  autoFocus: true,
  MessageInput: _MessageInput.MessageInput
});

var ThreadInner = function (_React$PureComponent2) {
  (0, _inherits2.default)(ThreadInner, _React$PureComponent2);

  var _super2 = _createSuper(ThreadInner);

  function ThreadInner(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ThreadInner);
    _this = _super2.call(this, props);
    _this.messageList = _react.default.createRef();
    return _this;
  }

  (0, _createClass2.default)(ThreadInner, [{
    key: "componentDidMount",
    value: function () {
      var _componentDidMount = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
        var parentID;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                parentID = this.props.thread.id;

                if (!(parentID && this.props.thread.reply_count)) {
                  _context.next = 4;
                  break;
                }

                _context.next = 4;
                return this.props.loadMoreThread();

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function componentDidMount() {
        return _componentDidMount.apply(this, arguments);
      }

      return componentDidMount;
    }()
  }, {
    key: "getSnapshotBeforeUpdate",
    value: function getSnapshotBeforeUpdate(prevProps) {
      if (prevProps.threadMessages.length < this.props.threadMessages.length) {
        var list = this.messageList.current;
        return list.scrollHeight - list.scrollTop;
      }

      return null;
    }
  }, {
    key: "componentDidUpdate",
    value: function () {
      var _componentDidUpdate = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(prevProps, prevState, snapshot) {
        var parentID, list, scrollDown;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                parentID = this.props.thread.id;

                if (!(parentID && this.props.thread.reply_count > 0 && this.props.threadMessages.length === 0)) {
                  _context2.next = 4;
                  break;
                }

                _context2.next = 4;
                return this.props.loadMoreThread();

              case 4:
                if (snapshot !== null) {
                  list = this.messageList.current;

                  scrollDown = function scrollDown() {
                    list.scrollTop = list.scrollHeight - snapshot;
                  };

                  scrollDown();
                  setTimeout(scrollDown, 100);
                }

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function componentDidUpdate(_x, _x2, _x3) {
        return _componentDidUpdate.apply(this, arguments);
      }

      return componentDidUpdate;
    }()
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      if (!this.props.thread) {
        return null;
      }

      var t = this.props.t;
      var read = {};
      return _react.default.createElement("div", {
        className: "str-chat__thread ".concat(this.props.fullWidth ? 'str-chat__thread--full' : '')
      }, _react.default.createElement("div", {
        className: "str-chat__thread-header"
      }, _react.default.createElement("div", {
        className: "str-chat__thread-header-details"
      }, _react.default.createElement("strong", null, t('Thread')), _react.default.createElement("small", null, ' ', t('{{ replyCount }} replies', {
        replyCount: this.props.thread.reply_count
      }))), _react.default.createElement("button", {
        onClick: function onClick(e) {
          return _this2.props.closeThread(e);
        },
        className: "str-chat__square-button"
      }, _react.default.createElement("svg", {
        width: "10",
        height: "10",
        xmlns: "http://www.w3.org/2000/svg"
      }, _react.default.createElement("path", {
        d: "M9.916 1.027L8.973.084 5 4.058 1.027.084l-.943.943L4.058 5 .084 8.973l.943.943L5 5.942l3.973 3.974.943-.943L5.942 5z",
        fillRule: "evenodd"
      })))), _react.default.createElement("div", {
        className: "str-chat__thread-list",
        ref: this.messageList
      }, _react.default.createElement(_Message.Message, (0, _extends2.default)({
        message: this.props.thread,
        initialMessage: true,
        threadList: true,
        Message: this.props.Message
      }, this.props, this.props.additionalParentMessageProps)), _react.default.createElement("div", {
        className: "str-chat__thread-start"
      }, t('Start of a new thread')), _react.default.createElement(_MessageList.MessageList, (0, _extends2.default)({
        messages: this.props.threadMessages,
        read: read,
        threadList: true,
        loadMore: this.props.loadMoreThread,
        hasMore: this.props.threadHasMore,
        loadingMore: this.props.threadLoadingMore,
        Message: this.props.Message
      }, this.props.additionalMessageListProps)), (0, _utils.smartRender)(this.props.MessageInput, _objectSpread({
        MessageInputSmall: _MessageInputSmall.MessageInputSmall,
        parent: this.props.thread,
        focus: this.props.autoFocus
      }, this.props.additionalMessageInputProps))));
    }
  }]);
  return ThreadInner;
}(_react.default.PureComponent);

(0, _defineProperty2.default)(ThreadInner, "propTypes", {
  channel: _propTypes.default.object.isRequired,
  thread: _propTypes.default.object.isRequired
});
exports.Thread = Thread = (0, _context3.withChannelContext)((0, _context3.withTranslationContext)(Thread));