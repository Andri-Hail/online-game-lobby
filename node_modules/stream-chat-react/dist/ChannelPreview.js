"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChannelPreview = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _ChannelPreviewCountOnly = require("./ChannelPreviewCountOnly");

var _context = require("../context");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var ChannelPreview = function (_PureComponent) {
  (0, _inherits2.default)(ChannelPreview, _PureComponent);

  var _super = _createSuper(ChannelPreview);

  function ChannelPreview(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ChannelPreview);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleEvent", function (event) {
      var channel = _this.props.channel;
      var isActive = _this.props.activeChannel && _this.props.activeChannel.cid === channel.cid;

      if (!isActive) {
        var unread = channel.countUnread(_this.state.lastRead);

        _this.setState({
          lastMessage: event.message,
          unread
        });
      } else {
        _this.setState({
          lastMessage: event.message,
          unread: 0
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getLatestMessage", function () {
      var _this$props = _this.props,
          channel = _this$props.channel,
          t = _this$props.t;
      var latestMessage = channel.state.messages[channel.state.messages.length - 1];

      if (!latestMessage) {
        return t('Nothing yet...');
      }

      if (latestMessage.deleted_at) {
        return t('Message deleted');
      }

      if (latestMessage.text) {
        return latestMessage.text;
      } else {
        if (latestMessage.command) {
          return '/' + latestMessage.command;
        }

        if (latestMessage.attachments.length) {
          return t('🏙 Attachment...');
        }

        return t('Empty message...');
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDisplayTitle", function () {
      var _this$props2 = _this.props,
          channel = _this$props2.channel,
          client = _this$props2.client;
      var title = channel.data.name;
      var members = Object.values(channel.state.members);

      if (!title && members.length === 2) {
        var otherMember = members.find(function (m) {
          return m.user.id !== client.user.id;
        });
        title = otherMember.user.name;
      }

      return title;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDisplayImage", function () {
      var _this$props3 = _this.props,
          channel = _this$props3.channel,
          client = _this$props3.client;
      var image = channel.data.image;
      var members = Object.values(channel.state.members);

      if (!image && members.length === 2) {
        var otherMember = members.find(function (m) {
          return m.user.id !== client.user.id;
        });
        image = otherMember.user.image;
      }

      return image;
    });
    _this.state = {
      lastMessage: {},
      unread: 0,
      lastRead: new Date()
    };
    return _this;
  }

  (0, _createClass2.default)(ChannelPreview, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var channel = this.props.channel;
      var unread = channel.countUnread();
      this.setState({
        unread
      });
      channel.on('message.new', this.handleEvent);
      channel.on('message.updated', this.handleEvent);
      channel.on('message.deleted', this.handleEvent);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var channel = this.props.channel;
      channel.off('message.new', this.handleEvent);
      channel.off('message.updated', this.handleEvent);
      channel.off('message.deleted', this.handleEvent);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.activeChannel && prevProps.activeChannel && this.props.activeChannel.cid !== prevProps.activeChannel.cid) {
        var isActive = this.props.activeChannel.cid === this.props.channel.cid;

        if (isActive) {
          this.setState({
            unread: 0,
            lastRead: new Date()
          });
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var props = _objectSpread({}, this.state, {}, this.props);

      var Preview = this.props.Preview;
      return _react.default.createElement(Preview, (0, _extends2.default)({}, props, {
        latestMessage: this.getLatestMessage(),
        displayTitle: this.getDisplayTitle(),
        displayImage: this.getDisplayImage(),
        active: this.props.activeChannel && this.props.activeChannel.cid === this.props.channel.cid
      }));
    }
  }]);
  return ChannelPreview;
}(_react.PureComponent);

exports.ChannelPreview = ChannelPreview;
(0, _defineProperty2.default)(ChannelPreview, "propTypes", {
  channel: _propTypes.default.object.isRequired,
  activeChannel: _propTypes.default.object,
  setActiveChannel: _propTypes.default.func.isRequired,
  Preview: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  watchers: _propTypes.default.object
});
(0, _defineProperty2.default)(ChannelPreview, "defaultProps", {
  Preview: _ChannelPreviewCountOnly.ChannelPreviewCountOnly
});
exports.ChannelPreview = ChannelPreview = (0, _context.withTranslationContext)((0, _context.withChatContext)(ChannelPreview));