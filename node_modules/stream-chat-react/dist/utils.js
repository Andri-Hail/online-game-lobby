"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateRandomId = generateRandomId;
exports.filterEmoji = exports.MESSAGE_ACTIONS = exports.smartRender = exports.renderText = exports.formatArray = exports.byDate = exports.isPromise = exports.isOnlyEmojis = exports.emojiData = exports.defaultMinimalEmojis = exports.commonEmoji = exports.emojiSetDef = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _anchorme = _interopRequireDefault(require("anchorme"));

var _emojiRegex = _interopRequireDefault(require("emoji-regex"));

var _withHtml = _interopRequireDefault(require("react-markdown/with-html"));

var _truncate = _interopRequireDefault(require("lodash/truncate"));

var _all = _interopRequireDefault(require("emoji-mart/data/all.json"));

var _react = _interopRequireDefault(require("react"));

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var emojiSetDef = {
  spriteUrl: 'https://getstream.imgix.net/images/emoji-sprite.png',
  size: 20,
  sheetColumns: 2,
  sheetRows: 3,
  sheetSize: 64
};
exports.emojiSetDef = emojiSetDef;
var commonEmoji = {
  emoticons: [],
  short_names: [],
  custom: true
};
exports.commonEmoji = commonEmoji;
var defaultMinimalEmojis = [_objectSpread({
  id: 'like',
  name: 'like',
  colons: ':+1:',
  sheet_x: 0,
  sheet_y: 0
}, commonEmoji, {}, emojiSetDef), _objectSpread({
  id: 'love',
  name: 'love',
  colons: ':heart:',
  sheet_x: 1,
  sheet_y: 2
}, commonEmoji, {}, emojiSetDef), _objectSpread({
  id: 'haha',
  name: 'haha',
  colons: ':joy:',
  sheet_x: 1,
  sheet_y: 0
}, commonEmoji, {}, emojiSetDef), _objectSpread({
  id: 'wow',
  name: 'wow',
  colons: ':astonished:',
  sheet_x: 0,
  sheet_y: 2
}, commonEmoji, {}, emojiSetDef), _objectSpread({
  id: 'sad',
  name: 'sad',
  colons: ':pensive:',
  sheet_x: 0,
  sheet_y: 1
}, commonEmoji, {}, emojiSetDef), _objectSpread({
  id: 'angry',
  name: 'angry',
  colons: ':angry:',
  sheet_x: 1,
  sheet_y: 1
}, commonEmoji, {}, emojiSetDef)];
exports.defaultMinimalEmojis = defaultMinimalEmojis;
var d = Object.assign({}, _all.default);
d.emojis = {};
var emojiData = d;
exports.emojiData = emojiData;

var isOnlyEmojis = function isOnlyEmojis(text) {
  if (!text) return false;
  var noEmojis = text.replace((0, _emojiRegex.default)(), '');
  var noSpace = noEmojis.replace(/[\s\n]/gm, '');
  return !noSpace;
};

exports.isOnlyEmojis = isOnlyEmojis;

var isPromise = function isPromise(thing) {
  return thing && typeof thing.then === 'function';
};

exports.isPromise = isPromise;

var byDate = function byDate(a, b) {
  return a.created_at - b.created_at;
};

exports.byDate = byDate;

var formatArray = function formatArray(dict, currentUserId) {
  var arr2 = Object.keys(dict);
  var arr3 = [];
  arr2.forEach(function (item, i) {
    if (currentUserId === dict[arr2[i]].user.id) {
      return;
    }

    arr3.push(dict[arr2[i]].user.name || dict[arr2[i]].user.id);
  });
  var outStr = '';

  if (arr3.length === 1) {
    outStr = arr3[0] + ' is typing...';
    dict;
  } else if (arr3.length === 2) {
    outStr = arr3.join(' and ') + ' are typing...';
  } else if (arr3.length > 2) {
    outStr = arr3.slice(0, -1).join(', ') + ', and ' + arr3.slice(-1) + ' are typing...';
  }

  return outStr;
};

exports.formatArray = formatArray;

var renderText = function renderText(message) {
  var text = message.text;
  var mentioned_users = message.mentioned_users;

  if (!text) {
    return;
  }

  var allowed = ['html', 'root', 'text', 'break', 'paragraph', 'emphasis', 'strong', 'link', 'list', 'listItem', 'code', 'inlineCode', 'blockquote', 'delete'];
  var urls = (0, _anchorme.default)(text, {
    list: true
  });

  var _iterator = _createForOfIteratorHelper(urls),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var urlInfo = _step.value;
      var displayLink = (0, _truncate.default)(urlInfo.encoded.replace(/^(www\.)/, ''), {
        length: 20,
        omission: '...'
      });

      var _mkdown = "[".concat(displayLink, "](").concat(urlInfo.protocol).concat(urlInfo.encoded, ")");

      text = text.replace(urlInfo.raw, _mkdown);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var newText = text;

  if (mentioned_users && mentioned_users.length) {
    for (var i = 0; i < mentioned_users.length; i++) {
      var username = mentioned_users[i].name || mentioned_users[i].id;
      var mkdown = "**@".concat(username, "**");
      var re = new RegExp("@".concat(username), 'g');
      newText = newText.replace(re, mkdown);
    }
  }

  return _react.default.createElement(_withHtml.default, {
    allowedTypes: allowed,
    source: newText,
    linkTarget: "_blank",
    plugins: [],
    escapeHtml: true,
    skipHtml: false,
    unwrapDisallowed: true
  });
};

exports.renderText = renderText;

function generateRandomId() {
  return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
}

function S4() {
  return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
}

var smartRender = function smartRender(ElementOrComponentOrLiteral, props, fallback) {
  if (ElementOrComponentOrLiteral === undefined) {
    ElementOrComponentOrLiteral = fallback;
  }

  if (_react.default.isValidElement(ElementOrComponentOrLiteral)) {
    var element = ElementOrComponentOrLiteral;
    return element;
  }

  var ComponentOrLiteral = ElementOrComponentOrLiteral;

  if (typeof ComponentOrLiteral === 'string' || typeof ComponentOrLiteral === 'number' || typeof ComponentOrLiteral === 'boolean' || ComponentOrLiteral == null) {
    return ComponentOrLiteral;
  }

  return _react.default.createElement(ComponentOrLiteral, props);
};

exports.smartRender = smartRender;
var MESSAGE_ACTIONS = {
  edit: 'edit',
  delete: 'delete',
  flag: 'flag',
  mute: 'mute'
};
exports.MESSAGE_ACTIONS = MESSAGE_ACTIONS;

var filterEmoji = function filterEmoji(emoji) {
  if (emoji.name === 'White Smiling Face' || emoji.name === 'White Frowning Face') {
    return false;
  }

  return true;
};

exports.filterEmoji = filterEmoji;