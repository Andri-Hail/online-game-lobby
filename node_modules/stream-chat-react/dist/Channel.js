"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Channel = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _context7 = require("../context");

var _LoadingIndicator = require("./LoadingIndicator");

var _LoadingErrorIndicator = require("./LoadingErrorIndicator");

var _v = _interopRequireDefault(require("uuid/v4"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _seamlessImmutable = _interopRequireDefault(require("seamless-immutable"));

var _visibilityjs = _interopRequireDefault(require("visibilityjs"));

var _streamChat = require("stream-chat");

var _MessageSimple = require("./MessageSimple");

var _Attachment = require("./Attachment");

var _debounce = _interopRequireDefault(require("lodash/debounce"));

var _throttle = _interopRequireDefault(require("lodash/throttle"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Channel = function (_PureComponent) {
  (0, _inherits2.default)(Channel, _PureComponent);

  var _super = _createSuper(Channel);

  function Channel(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Channel);
    _this = _super.call(this, props);
    _this.state = {
      error: false
    };
    return _this;
  }

  (0, _createClass2.default)(Channel, [{
    key: "render",
    value: function render() {
      if (!this.props.channel || !this.props.channel.cid) {
        return this.props.EmptyPlaceholder;
      }

      return _react.default.createElement(ChannelInner, (0, _extends2.default)({}, this.props, {
        key: this.props.channel.cid
      }));
    }
  }]);
  return Channel;
}(_react.PureComponent);

exports.Channel = Channel;
(0, _defineProperty2.default)(Channel, "propTypes", {
  channel: _propTypes.default.shape({
    watch: _propTypes.default.func
  }),
  client: _propTypes.default.object.isRequired,
  EmptyPlaceholder: _propTypes.default.node,
  LoadingErrorIndicator: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  LoadingIndicator: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  Message: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  Attachment: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  onMentionsClick: _propTypes.default.func,
  onMentionsHover: _propTypes.default.func,
  multipleUploads: _propTypes.default.bool,
  acceptedFiles: _propTypes.default.array,
  maxNumberOfFiles: _propTypes.default.number,
  doSendMessageRequest: _propTypes.default.func,
  doUpdateMessageRequest: _propTypes.default.func
});
(0, _defineProperty2.default)(Channel, "defaultProps", {
  EmptyPlaceholder: null,
  LoadingIndicator: _LoadingIndicator.LoadingIndicator,
  LoadingErrorIndicator: _LoadingErrorIndicator.LoadingErrorIndicator,
  Message: _MessageSimple.MessageSimple,
  Attachment: _Attachment.Attachment
});

var ChannelInner = function (_PureComponent2) {
  (0, _inherits2.default)(ChannelInner, _PureComponent2);

  var _super2 = _createSuper(ChannelInner);

  function ChannelInner(props) {
    var _this2;

    (0, _classCallCheck2.default)(this, ChannelInner);
    _this2 = _super2.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "openThread", function (message, e) {
      if (e && e.preventDefault) {
        e.preventDefault();
      }

      var channel = _this2.props.channel;
      var threadMessages = channel.state.threads[message.id] || [];

      _this2.setState({
        thread: message,
        threadMessages
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "loadMoreThread", (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
      var channel, parentID, oldMessages, oldestMessageID, limit, queryResponse, hasMore, threadMessages;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!_this2.state.threadLoadingMore) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              _this2.setState({
                threadLoadingMore: true
              });

              channel = _this2.props.channel;
              parentID = _this2.state.thread.id;
              oldMessages = channel.state.threads[parentID] || [];
              oldestMessageID = oldMessages[0] ? oldMessages[0].id : null;
              limit = 50;
              _context.next = 10;
              return channel.getReplies(parentID, {
                limit,
                id_lt: oldestMessageID
              });

            case 10:
              queryResponse = _context.sent;
              hasMore = queryResponse.messages.length === limit;
              threadMessages = channel.state.threads[parentID] || [];

              _this2._loadMoreThreadFinishedDebounced(hasMore, threadMessages);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "loadMoreThreadFinished", function (threadHasMore, threadMessages) {
      _this2.setState({
        threadLoadingMore: false,
        threadHasMore,
        threadMessages
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "closeThread", function (e) {
      if (e && e.preventDefault) {
        e.preventDefault();
      }

      _this2.setState({
        thread: null,
        threadMessages: []
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "updateMessage", function (updatedMessage, extraState) {
      var channel = _this2.props.channel;
      extraState = extraState || {};
      channel.state.addMessageSorted(updatedMessage);

      if (_this2.state.thread && updatedMessage.parent_id) {
        extraState.threadMessages = channel.state.threads[updatedMessage.parent_id] || [];
      }

      _this2.setState(_objectSpread({
        messages: channel.state.messages
      }, extraState));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "removeMessage", function (message) {
      var channel = _this2.props.channel;
      channel.state.removeMessage(message);
      var threadMessages = channel.state.threads[message.parent_id] || [];

      _this2.setState({
        messages: channel.state.messages,
        threads: channel.state.threads,
        threadMessages
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "createMessagePreview", function (text, attachments, parent, mentioned_users) {
      var clientSideID = "".concat(_this2.props.client.userID, "-") + (0, _v.default)();
      var message = {
        text,
        html: text,
        __html: text,
        id: clientSideID,
        type: 'regular',
        status: 'sending',
        user: _objectSpread({
          id: _this2.props.client.userID
        }, _this2.props.client.user),
        created_at: new Date(),
        attachments,
        mentioned_users,
        reactions: []
      };

      if (parent && parent.id) {
        message.parent_id = parent.id;
      }

      return message;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "editMessage", function (updatedMessage) {
      if (_this2.props.doUpdateMessageRequest) {
        return Promise.resolve(_this2.props.doUpdateMessageRequest(_this2.props.channel.cid, updatedMessage));
      }

      return _this2.props.client.updateMessage(updatedMessage);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "_sendMessage", function () {
      var _ref2 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(message) {
        var text, attachments, id, parent_id, mentioned_users, messageData, messageResponse;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                text = message.text, attachments = message.attachments, id = message.id, parent_id = message.parent_id, mentioned_users = message.mentioned_users;
                messageData = {
                  text,
                  attachments,
                  mentioned_users,
                  id,
                  parent_id
                };
                _context2.prev = 2;

                if (!_this2.props.doSendMessageRequest) {
                  _context2.next = 9;
                  break;
                }

                _context2.next = 6;
                return _this2.props.doSendMessageRequest(_this2.props.channel.cid, messageData);

              case 6:
                messageResponse = _context2.sent;
                _context2.next = 12;
                break;

              case 9:
                _context2.next = 11;
                return _this2.props.channel.sendMessage(messageData);

              case 11:
                messageResponse = _context2.sent;

              case 12:
                if (messageResponse.message) {
                  messageResponse.message.status = 'received';

                  _this2.updateMessage(messageResponse.message);
                }

                _context2.next = 19;
                break;

              case 15:
                _context2.prev = 15;
                _context2.t0 = _context2["catch"](2);
                message.status = 'failed';

                _this2.updateMessage(message);

              case 19:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[2, 15]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "sendMessage", function () {
      var _ref4 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(_ref3) {
        var text, _ref3$attachments, attachments, _ref3$mentioned_users, mentioned_users, parent, messagePreview;

        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                text = _ref3.text, _ref3$attachments = _ref3.attachments, attachments = _ref3$attachments === void 0 ? [] : _ref3$attachments, _ref3$mentioned_users = _ref3.mentioned_users, mentioned_users = _ref3$mentioned_users === void 0 ? [] : _ref3$mentioned_users, parent = _ref3.parent;

                _this2.props.channel.state.filterErrorMessages();

                messagePreview = _this2.createMessagePreview(text, attachments, parent, mentioned_users);

                _this2.updateMessage(messagePreview, {
                  messageInput: '',
                  commands: [],
                  userAutocomplete: []
                });

                _context3.next = 6;
                return _this2._sendMessage(messagePreview);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "retrySendMessage", function () {
      var _ref5 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(message) {
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                message = message.asMutable();
                message.status = 'sending';

                _this2.updateMessage(message);

                _context4.next = 5;
                return _this2._sendMessage(message);

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "handleEvent", function (e) {
      var channel = _this2.props.channel;
      var threadMessages = [];
      var threadState = {};

      if (_this2.state.thread) {
        threadMessages = channel.state.threads[_this2.state.thread.id] || [];
        threadState['threadMessages'] = threadMessages;
      }

      if (_this2.state.thread && e.message && e.message.id === _this2.state.thread.id) {
        threadState['thread'] = channel.state.messageToImmutable(e.message);
      }

      if (Object.keys(threadState).length > 0) {
        _this2.setState(threadState);
      }

      if (e.type === 'message.new') {
        var mainChannelUpdated = true;

        if (e.message.parent_id && !e.message.show_in_channel) {
          mainChannelUpdated = false;
        }

        if (mainChannelUpdated && e.message.user.id !== _this2.props.client.userID) {
          if (_visibilityjs.default.state() === 'visible') {
            _this2._markReadThrottled(channel);
          } else {
            var unread = channel.countUnread(_this2.lastRead);
            document.title = "(".concat(unread, ") ").concat(_this2.originalTitle);
          }
        }
      }

      if (e.type === 'member.added') {
        _this2.addToEventHistory(e);
      }

      if (e.type === 'member.removed') {
        _this2.addToEventHistory(e);
      }

      _this2._setStateThrottled({
        messages: channel.state.messages,
        watchers: channel.state.watchers,
        read: channel.state.read,
        typing: channel.state.typing,
        watcher_count: channel.state.watcher_count
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "addToEventHistory", function (e) {
      _this2.setState(function (prevState) {
        if (!prevState.message || !prevState.message.length) {
          return;
        }

        var lastMessageId = prevState.messages[prevState.messages.length - 1].id;
        if (!prevState.eventHistory[lastMessageId]) return _objectSpread({}, prevState, {
          eventHistory: _objectSpread({}, prevState.eventHistory, {
            [lastMessageId]: [e]
          })
        });
        return _objectSpread({}, prevState, {
          eventHistory: _objectSpread({}, prevState.eventHistory, {
            [lastMessageId]: [].concat((0, _toConsumableArray2.default)(prevState.eventHistory[lastMessageId]), [e])
          })
        });
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "markRead", function (channel) {
      if (_this2.props.channel.disconnected || !channel.getConfig().read_events) {
        return;
      }

      _this2.lastRead = new Date();
      (0, _streamChat.logChatPromiseExecution)(channel.markRead(), 'mark read');

      if (_this2.originalTitle) {
        document.title = _this2.originalTitle;
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "loadMore", (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5() {
      var limit,
          oldestMessage,
          oldestID,
          perPage,
          queryResponse,
          hasMore,
          _args5 = arguments;
      return _regenerator.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              limit = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : 100;

              if (!_this2.state.loadingMore) {
                _context5.next = 3;
                break;
              }

              return _context5.abrupt("return");

            case 3:
              _this2.setState({
                loadingMore: true
              });

              oldestMessage = _this2.state.messages[0];

              if (!(oldestMessage && oldestMessage.status !== 'received')) {
                _context5.next = 8;
                break;
              }

              _this2.setState({
                loadingMore: false
              });

              return _context5.abrupt("return");

            case 8:
              oldestID = oldestMessage ? oldestMessage.id : null;
              perPage = limit;
              _context5.prev = 10;
              _context5.next = 13;
              return _this2.props.channel.query({
                messages: {
                  limit: perPage,
                  id_lt: oldestID
                }
              });

            case 13:
              queryResponse = _context5.sent;
              _context5.next = 21;
              break;

            case 16:
              _context5.prev = 16;
              _context5.t0 = _context5["catch"](10);
              console.warn('message pagination request failed with error', _context5.t0);

              _this2.setState({
                loadingMore: false
              });

              return _context5.abrupt("return");

            case 21:
              hasMore = queryResponse.messages.length === perPage;

              _this2._loadMoreFinishedDebounced(hasMore, _this2.props.channel.state.messages);

            case 23:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, null, [[10, 16]]);
    })));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "_onMentionsHoverOrClick", function (e, mentioned_users) {
      if (!_this2.props.onMentionsHover && !_this2.props.onMentionsClick) return;
      var tagName = e.target.tagName.toLowerCase();
      var textContent = e.target.innerHTML.replace('*', '');

      if (tagName === 'strong' && textContent[0] === '@') {
        var userName = textContent.replace('@', '');
        var user = mentioned_users.find(function (user) {
          return user.name === userName || user.id === userName;
        });

        if (_this2.props.onMentionsHover && typeof _this2.props.onMentionsHover === 'function' && e.type === 'mouseover') {
          _this2.props.onMentionsHover(e, user);
        }

        if (_this2.props.onMentionsClick && e.type === 'click' && typeof _this2.props.onMentionsClick === 'function') {
          _this2.props.onMentionsClick(e, user);
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "loadMoreFinished", function (hasMore, messages) {
      _this2.setState({
        loadingMore: false,
        hasMore,
        messages
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "getContext", function () {
      return _objectSpread({}, _this2.state, {
        client: _this2.props.client,
        channel: _this2.props.channel,
        Message: _this2.props.Message,
        Attachment: _this2.props.Attachment,
        multipleUploads: _this2.props.multipleUploads,
        acceptedFiles: _this2.props.acceptedFiles,
        maxNumberOfFiles: _this2.props.maxNumberOfFiles,
        updateMessage: _this2.updateMessage,
        removeMessage: _this2.removeMessage,
        sendMessage: _this2.sendMessage,
        editMessage: _this2.editMessage,
        retrySendMessage: _this2.retrySendMessage,
        loadMore: _this2.loadMore,
        openThread: _this2.openThread,
        closeThread: _this2.closeThread,
        loadMoreThread: _this2.loadMoreThread,
        onMentionsClick: _this2._onMentionsHoverOrClick,
        onMentionsHover: _this2._onMentionsHoverOrClick
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "renderComponent", function () {
      return _this2.props.children;
    });
    _this2.state = {
      error: false,
      loading: true,
      loadingMore: false,
      hasMore: true,
      messages: (0, _seamlessImmutable.default)([]),
      online: true,
      typing: (0, _seamlessImmutable.default)({}),
      watchers: (0, _seamlessImmutable.default)({}),
      members: (0, _seamlessImmutable.default)({}),
      read: (0, _seamlessImmutable.default)({}),
      eventHistory: {},
      thread: false,
      threadMessages: [],
      threadLoadingMore: false,
      threadHasMore: true
    };
    _this2._loadMoreFinishedDebounced = (0, _debounce.default)(_this2.loadMoreFinished, 2000, {
      leading: true,
      trailing: true
    });
    _this2._loadMoreThreadFinishedDebounced = (0, _debounce.default)(_this2.loadMoreThreadFinished, 2000, {
      leading: true,
      trailing: true
    });
    _this2._markReadThrottled = (0, _throttle.default)(_this2.markRead, 500, {
      leading: true,
      trailing: true
    });
    _this2._setStateThrottled = (0, _throttle.default)(_this2.setState, 500, {
      leading: true,
      trailing: true
    });
    return _this2;
  }

  (0, _createClass2.default)(ChannelInner, [{
    key: "componentDidMount",
    value: function () {
      var _componentDidMount = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee6() {
        var channel, errored;
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                channel = this.props.channel;
                errored = false;

                if (channel.initialized) {
                  _context6.next = 12;
                  break;
                }

                _context6.prev = 3;
                _context6.next = 6;
                return channel.watch();

              case 6:
                _context6.next = 12;
                break;

              case 8:
                _context6.prev = 8;
                _context6.t0 = _context6["catch"](3);
                this.setState({
                  error: _context6.t0
                });
                errored = true;

              case 12:
                this.originalTitle = document.title;
                this.lastRead = new Date();

                if (!errored) {
                  this.copyChannelState();
                  this.listenToChanges();
                }

              case 15:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[3, 8]]);
      }));

      function componentDidMount() {
        return _componentDidMount.apply(this, arguments);
      }

      return componentDidMount;
    }()
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.state.thread) {
        for (var i = this.state.messages.length - 1; i >= 0; i--) {
          if (this.state.messages[i].id === this.state.thread.id) {
            this.setState({
              thread: this.state.messages[i]
            });
            break;
          }
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.props.client.off('connection.recovered', this.handleEvent);
      this.props.channel.off(this.handleEvent);

      this._loadMoreFinishedDebounced.cancel();

      this._loadMoreThreadFinishedDebounced.cancel();

      if (this.visibilityListener || this.visibilityListener === 0) {
        _visibilityjs.default.unbind(this.visibilityListener);
      }
    }
  }, {
    key: "copyChannelState",
    value: function copyChannelState() {
      var channel = this.props.channel;
      this.setState({
        messages: channel.state.messages,
        read: channel.state.read,
        watchers: channel.state.watchers,
        members: channel.state.members,
        watcher_count: channel.state.watcher_count,
        loading: false,
        typing: (0, _seamlessImmutable.default)({})
      });
      if (channel.countUnread() > 0) channel.markRead();
    }
  }, {
    key: "removeEphemeralMessages",
    value: function removeEphemeralMessages() {
      var c = this.props.channel;
      c.state.selectRegularMessages();
      this.setState({
        messages: c.state.messages
      });
    }
  }, {
    key: "listenToChanges",
    value: function listenToChanges() {
      var _this3 = this;

      this.props.client.on('connection.recovered', this.handleEvent);
      var channel = this.props.channel;
      channel.on(this.handleEvent);
      this.boundMarkRead = this.markRead.bind(this, channel);
      this.visibilityListener = _visibilityjs.default.change(function (e, state) {
        if (state === 'visible') {
          _this3.boundMarkRead();
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var t = this.props.t;
      var core;
      var LoadingIndicator = this.props.LoadingIndicator;
      var LoadingErrorIndicator = this.props.LoadingErrorIndicator;

      if (this.state.error) {
        core = _react.default.createElement(LoadingErrorIndicator, {
          error: this.state.error
        });
      } else if (this.state.loading) {
        core = _react.default.createElement(LoadingIndicator, {
          size: 25,
          isLoading: true
        });
      } else if (!this.props.channel || !this.props.channel.watch) {
        core = _react.default.createElement("div", null, t('Channel Missing'));
      } else {
        core = _react.default.createElement(_context7.ChannelContext.Provider, {
          value: this.getContext()
        }, _react.default.createElement("div", {
          className: "str-chat__container"
        }, this.renderComponent()));
      }

      return _react.default.createElement("div", {
        className: "str-chat str-chat-channel ".concat(this.props.theme)
      }, core);
    }
  }]);
  return ChannelInner;
}(_react.PureComponent);

(0, _defineProperty2.default)(ChannelInner, "propTypes", {
  channel: _propTypes.default.shape({
    watch: _propTypes.default.func
  }).isRequired,
  client: _propTypes.default.object.isRequired,
  LoadingIndicator: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  LoadingErrorIndicator: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func])
});
exports.Channel = Channel = (0, _context7.withChatContext)((0, _context7.withTranslationContext)(Channel));